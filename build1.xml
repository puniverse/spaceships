<?xml version="1.0" encoding="UTF-8"?>
<project name="spaceships" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
             
    <description>Builds, tests, and runs spaceships.</description>
    
    <import file="ivy/ivy-install.xml"/>
    
    <property name="project" value="spaceships"/>
    <property name="version" value="1.0-SNAPSHOT"/>
    <property name="status" value="integration"/>
    <property name="vendor" value="Parallel Universe Software Co."/>
    <property name="description" value="A demonstraition of Spacebase (spatial real-time IMDB) capabilities."/>
    <property name="url" value="http://puniverse.github.com/spaceships"/>
    <property name="license.name" value="The MIT license"/>
    <property name="license.url" value="http://opensource.org/licenses/MIT"/>
    <property name="scm.url" value="https://github.com/puniverse/spaceships"/>
    <property name="scm.connection" value="https://github.com/puniverse/spaceships.git"/>
    
    <property name="javac.source" value="1.7"/>
    <property name="javac.target" value="1.7"/>
    <property name="javac.debug" value="true"/>
    
    <property name="src.dir" location="src"/>
    <property name="lib.dir" location="lib"/>
    <property name="doc.dir" location="docs"/>
    <property name="test.src.dir" location="test"/>
    <property name="build.dir" location="build"/>
    <property name="build.lib.dir" location="${build.dir}/lib"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.classes.excludes" value="**/*.java"/>
    <property name="build.test.classes.dir" location="${build.dir}/test/classes"/>
    <property name="build.test.results.dir" location="${build.dir}/test/results"/>
    <property name="dist.dir" location="dist"/>
    <property name="dist.jar" location="${dist.dir}/${project}.jar"/>
    <property name="artifacts.dir" location="artifacts"/>
    <property name="dist.javadoc.dir" location="${dist.dir}/javadoc"/>
    <property name="release.zip" location="${artifacts.dir}/${project}-${version}.zip"/>
    
    <property name="javadoc.windowtitle" value="Spaceships ${version}"/>
    <property name="javadoc.noindex" value="no"/>
    <property name="javadoc.nonavbar" value="no"/>
    <property name="javadoc.notree" value="no"/>
    <property name="javadoc.author" value="no"/>
    <property name="javadoc.private" value="no"/>
    <property name="javadoc.splitindex" value="no"/>
    <property name="javadoc.use" value="yes"/>
    <property name="javadoc.version" value="yes"/>
    <property name="javadoc.additionalparam" value=""/>
     
    <property name="junit.printsummary" value="on"/>
    <property name="junit.haltonerror" value="true"/>
    <property name="junit.haltofailure" value="false"/>
               
    <path id="javadoc.files">
        <fileset dir="${src.dir}">
            <filename name="**/*.java"/>
        </fileset>
    </path>
    
    <!-- <property name="javancss.dir" location="../lib/javancss-32.53/lib/"/> -->


    <!-- ########################################################################################### -->
    <target name="default" depends="dist" description="builds the distribution "/>

    <!--
    <target name="-properties">
        <property file="build1.properties"/>
    </target>
    -->
       
    <target name="-properties-check">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="lib.dir">Must set lib.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="build.lib.dir">Must set build.lib.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    
    <target name="-init" depends="-properties-check">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${lib.dir}"/>
    </target>
    
    <target name="-configure-ivy" description="configure ivy" depends="init-ivy">
        <ivy:configure file="ivysettings.xml"/>
    </target>
    
    <macrodef name="resolve">
        <attribute name="conf" default="NOT SET"/>
        <sequential>
            <ivy:resolve file="ivy.xml" conf="@{conf}" keep="true"/>
            <property name="conf" value="@{conf}"/>
            <path id="classpath">
                <fileset dir="${lib.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="baselib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${build.lib.dir}/@{conf}">
                    <include name="**/*.jar"/>
                </fileset>
            </path>
        </sequential>
    </macrodef>
    
    <target name="-resolve-compile" description="resolve dependencies with ivy" depends="-configure-ivy">
        <resolve conf="compile"/>
    </target>

    <target name="-resolve-runtime" description="resolve dependencies with ivy" depends="-configure-ivy">
        <resolve conf="runtime"/>
    </target>

    <target name="-resolve-test" description="resolve dependencies with ivy" depends="-configure-ivy">
        <resolve conf="test"/>
    </target>
 
    <target name="-retrieve" description="retreive dependencies with ivy" depends="-configure-ivy">
        <ivy:retrieve pattern="${build.lib.dir}/[conf]/[artifact]-[revision].[ext]" type="jar,bundle" sync="true"/>
    </target>
    
    <target name="report" depends="-retrieve" description="--> generates a report of dependencies">
        <property name="conf" value="*"/>
        <ivy:report todir="${build.dir}"/>
    </target>
    
    <target name="-do-compile" depends="-init">
        <mkdir dir="${build.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
               includeAntRuntime="false"
               debug="${javac.debug}"
               source="${javac.source}"
               target="${javac.target}">
            <compilerarg value="-XDignore.symbol.file" compiler="modern"/>
            <include name="**/*.java"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </javac>
    </target>
    
    <target name="compile" depends="-init,-resolve-compile,-retrieve,-do-compile" description="compile the source"/>
    
    <target name="compile-tests" depends="-init,-resolve-test,-retrieve,-do-compile" description="compile the tests">
        <mkdir dir="${build.test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}"
               includeAntRuntime="false"
               debug="true"
               source="${javac.source}"
               target="${javac.target}">
            <compilerarg value="-XDignore.symbol.file" compiler="modern"/>
            <include name="**/*.java"/>
            <classpath>
                <path refid="classpath"/>
                <pathelement path="${build.classes.dir}"/>
            </classpath>
        </javac>
    </target>
        
    <target name="test" depends="compile-tests" description="run all tests">
        <mkdir dir="${build.test.results.dir}"/>
        <junit fork="yes" 
               tempdir="${build.test.results.dir}"
               printsummary="${junit.printsummary}"
               haltonerror="${junit.haltonerror}"
               haltonfailure="${junit.haltofailure}">
            <classpath>
                <path refid="classpath"/>
                <pathelement path="${build.classes.dir}"/>
                <pathelement path="${build.test.classes.dir}"/>
            </classpath>
            
            <assertions enablesystemassertions="true">
                <enable/>
            </assertions>
            
            <formatter type="plain"/>
            
            <batchtest todir="${build.test.results.dir}">
                <fileset dir="${build.test.classes.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="doc-dist" depends="-init" description="generate documentation for a release dist">
        <doc javadocurl="../../../javadoc"/>
    </target>
    
    <target name="doc-site" depends="-init" description="generate documentation for a release dist">
        <doc javadocurl="${url}/javadoc"/>
    </target>
    
    <macrodef name="doc" description="generate documentation">
        <attribute name="javadocurl" default="NOT SET"/>
        <sequential>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/docs"/>
        <exec executable="make" dir="${doc.dir}">
            <env key="JAVADOC_URL" value="@{javadocurl}"/>
            <arg value="html"/>
        </exec>
        <copy toDir="${dist.dir}/docs">
            <fileset dir="${doc.dir}/build/html/"/>
        </copy>
        </sequential>
    </macrodef>
    
    <target name="-do-javadoc" depends="-init" description="generate javadoc">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc
            destdir="${dist.javadoc.dir}"
            docencoding="UTF-8" 
            charset="UTF-8" 
            failonerror="true"     
            additionalparam="${javadoc.additionalparam}" 
            author="${javadoc.author}" 
            noindex="${javadoc.noindex}" 
            nonavbar="${javadoc.nonavbar}" 
            notree="${javadoc.notree}" 
            private="${javadoc.private}" 
            source="${javac.source}" 
            splitindex="${javadoc.splitindex}" 
            use="${javadoc.use}" 
            useexternalfile="true" 
            version="${javadoc.version}" 
            windowtitle="${javadoc.windowtitle}">
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
            <link href="http://docs.guava-libraries.googlecode.com/git-history/v12.0/javadoc/"/>
            <classpath>
                <path refid="classpath"/>
            </classpath>
            <sourcefiles>
                <path refid="javadoc.files"/>
                <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                    <include name="**/*.java"/>
                </fileset>
            </sourcefiles>
        </javadoc>
        <copy todir="${dist.javadoc.dir}">
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/doc-files/**"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/doc-files/**"/>
            </fileset>
        </copy>
    </target>
    
    <target name="javadoc" depends="-init,-resolve-compile,-retrieve,-do-javadoc" description="generate javadoc"/>

    <target name="dist" depends="-resolve-runtime,-retrieve,-do-compile,-do-javadoc" description="generate the distribution" >
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/lib"/>
        <mkdir dir="${dist.dir}/shader"/>
        <copy todir="${dist.dir}/lib">
            <path refid="classpath"/>
        </copy>
        <copy todir="${dist.dir}/shader">
            <fileset dir="${src.dir}/co/paralleluniverse/spaceships/render/shader/">
                    <include name="*"/>                
            </fileset>
        </copy>
        <copy todir="${dist.dir}/lib" file="baselib/libgluegen-rt.jnilib"/>
        <copy todir="${dist.dir}/" file="spaceships.properties"/>
        <copy todir="${dist.dir}/" file="spaceship.png"/>
        <copy todir="${dist.dir}/" file="explosion.png"/>
        <manifestclasspath property="jar.classpath" jarfile="${dist.jar}">
            <classpath>
                <fileset dir="${dist.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </manifestclasspath>
        <jar jarfile="${dist.jar}" basedir="${build.classes.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Implementation-Title" value="${project}"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="${vendor}"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
                <attribute name="Main-Class" value="co.paralleluniverse.spaceships.Spaceships"/>
            </manifest>
        </jar>
        
        <zip destfile="${dist.dir}/src.zip" basedir="${src.dir}" whenempty="fail"/>
        

    </target>

    <target name="package" depends="dist,doc-dist" description="package release into a zip file">
        <mkdir dir="${artifacts.dir}"/>
        <zip destfile="${release.zip}" basedir="${dist.dir}" whenempty="fail"/>
    </target>
    
    <target name="prepare" depends="dist" description="prepare artifacts">
        <mkdir dir="${artifacts.dir}"/>
        <property name="artifact.prefix" value="${artifacts.dir}/${project}-${version}"/>

        <copy file="${dist.jar}" tofile="${artifact.prefix}.jar" />
        
        <jar jarfile="${artifact.prefix}-javadoc.jar" basedir="${dist.javadoc.dir}"/>
        
        <jar jarfile="${artifact.prefix}-sources.jar" basedir="${src.dir}"/>
        
        <ivy:deliver deliverpattern="${artifact.prefix}.ivy.xml" pubrevision="${version}" status="${status}"/>
        <ivy:makepom ivyfile="${artifact.prefix}.ivy.xml" pomfile="${artifact.prefix}.pom" conf="default,runtime,javadoc,sources"
                     description="${description}" templatefile="ivy/pom.template.xml">
            <mapping conf="default" scope="default"/>
            <mapping conf="compile" scope="compile"/>
            <mapping conf="sources" scope="sources"/>
            <mapping conf="javadoc" scope="javadoc"/>
        </ivy:makepom>
    </target>
    
    <target name="publish" depends="prepare" description="publish artifacts to repository">
        <ivy:publish resolver="nexus-deploy" forcedeliver="true" overwrite="true" publishivy="false" conf="default,compile,runtime,javadoc,sources">
            <artifacts pattern="${artifacts.dir}/[artifact]-[revision](-[classifier]).[ext]"/>
        </ivy:publish>
    </target>
    
    <target name="clean" depends="-properties-check" description="clean up">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <exec executable="make" dir="${doc.dir}">
            <arg value="clean"/>
        </exec>
    </target>
    
    <target name="clean-cache" description="clean the ivy cache">
        <ivy:cleancache />
    </target>
        
    <target name="ncss" if="javancss.dir">
        <taskdef name="javancss" classname="javancss.JavancssAntTask">
            <classpath>
                <pathelement location="${javancss.dir}/javancss.jar"/>
                <pathelement location="${javancss.dir}/ccl.jar"/>
                <pathelement location="${javancss.dir}/jhbasic.jar"/>
                <pathelement location="${javancss.dir}/javacc.jar"/>
            </classpath>
        </taskdef>
        <javancss srcdir="src"
                  includes="**/*.java"
                  generateReport="true"
                  packageMetrics="true"
                  classMetrics="false"
                  functionMetrics="false"/>
    </target>
</project>
